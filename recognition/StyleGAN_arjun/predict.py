"""
Contains code to test and visualize output from trained StyleGAN2 model on ADNI dataset.
This file provides:
    - Functions to generate and save synthetic brain MRI images
    - Model loading and inference pipeline
    - Visualization utilities for generated images
"""
import torch
from modules import Generator, MappingNetwork
from train import get_w, get_noise
from config import ADNI_IMG_SIZE, z_dim, w_dim
import matplotlib.pyplot as plt
import cv2
import math
import os

def generate_and_save_imgs(model, epoch, w, noise):
    """
    Displays and saves images generated by StyleGAN2 generator (model).
    """
    with torch.no_grad():
        predictions = model(w, noise).detach().cpu()

    fig = plt.figure(figsize=(4,4))

    for i in range(predictions.shape[0]):
        plt.subplot(4, 4, i + 1)
        fake_img = predictions[i, 0, :, :]
        fake_img = (fake_img + 1) / 2
        fake_img = fake_img.numpy()
        # fake_img = (fake_img * 127.5 + 127.5).astype(np.uint8)
        image = cv2.cvtColor(fake_img, cv2.COLOR_BGR2RGB)
        plt.imshow(image)
        # plt.imshow(predictions[i, 0, :, :] * 127.5 * 127.5, cmap="rgb")
        plt.axis("off")

    # Create the directory if it doesn't exist
    os.makedirs("./stylegan_outputs", exist_ok=True)

    # Correctly format the filename with the epoch number
    filename = f"./stylegan_outputs/img_at_epoch_{epoch}.png"
    plt.savefig(filename)
    plt.show()

def main():
    # -- Check Device --
    if (torch.backends.mps.is_available()):
        device = torch.device("mps")
    else:
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    print("> Device:", device)

    num_layers = int(math.log2(ADNI_IMG_SIZE))

    # -- Initialise Models --
    latent_net = MappingNetwork(z_dim, w_dim)
    model_G = Generator(num_layers, w_dim).to(device)

    # -- Move models to correct device --
    latent_net = latent_net.to(device)
    model_G = model_G.to(device)

    # -- Load trained models --
    model_G.load_state_dict(torch.load('./models/model_G.pth', map_location=device, weights_only=True))
    latent_net.load_state_dict(torch.load('./models/latent_net.pth', map_location=device, weights_only=True))

    model_G.eval()
    latent_net.eval()

    # Test model
    w = get_w(w_dim, 16, num_layers, latent_net, device)
    noise = get_noise(num_layers, 16, device)
    generate_and_save_imgs(model_G, 0, w, noise)

if __name__ == "__main__":
    main()
