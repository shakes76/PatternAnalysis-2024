Matplotlib created a temporary cache directory at /scratch/212225/matplotlib-gbc6uw_m because the default path (/cache/matplotlib) is not a writable directory; it is highly recommended to set the MPLCONFIGDIR environment variable to a writable directory, in particular to speed up the import of Matplotlib and to better support multiprocessing.
/home/Student/s4697959/miniconda3/envs/demo/lib/python3.12/site-packages/torch/utils/data/dataloader.py:557: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 1, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
/home/Student/s4697959/miniconda3/envs/demo/lib/python3.12/site-packages/torch/utils/data/dataloader.py:557: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 1, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
Using device: cuda
Epoch 1/80
----------
Train Loss: 0.7257 Acc: 0.5033
Val Loss: 0.7388 Acc: 0.5058
Best model updated and saved.

Epoch 2/80
----------
Train Loss: 0.7023 Acc: 0.5067
Val Loss: 0.6921 Acc: 0.4942
No improvement for 1 epochs.

Epoch 3/80
----------
Train Loss: 0.6978 Acc: 0.5152
Val Loss: 0.7127 Acc: 0.4942
No improvement for 2 epochs.

Epoch 4/80
----------
Train Loss: 0.6996 Acc: 0.5042
Val Loss: 0.6929 Acc: 0.5149
Best model updated and saved.

Epoch 5/80
----------
Train Loss: 0.6960 Acc: 0.5100
Val Loss: 0.6912 Acc: 0.5256
Best model updated and saved.

Epoch 6/80
----------
Train Loss: 0.6956 Acc: 0.5151
Val Loss: 0.6950 Acc: 0.5058
No improvement for 1 epochs.

Epoch 7/80
----------
Train Loss: 0.6945 Acc: 0.5138
Val Loss: 0.6912 Acc: 0.5237
No improvement for 2 epochs.

Epoch 8/80
----------
Train Loss: 0.6933 Acc: 0.5166
Val Loss: 0.6910 Acc: 0.4988
No improvement for 3 epochs.

Epoch 9/80
----------
Train Loss: 0.6921 Acc: 0.5236
Val Loss: 0.6883 Acc: 0.5637
Best model updated and saved.

Epoch 10/80
----------
Train Loss: 0.6955 Acc: 0.5065
Val Loss: 0.6917 Acc: 0.5381
No improvement for 1 epochs.

Epoch 11/80
----------
Train Loss: 0.6939 Acc: 0.5118
Val Loss: 0.6937 Acc: 0.4951
No improvement for 2 epochs.

Epoch 12/80
----------
Train Loss: 0.6908 Acc: 0.5267
Val Loss: 0.6865 Acc: 0.5472
No improvement for 3 epochs.

Epoch 13/80
----------
Train Loss: 0.6878 Acc: 0.5397
Val Loss: 0.6841 Acc: 0.5502
No improvement for 4 epochs.

Epoch 14/80
----------
Train Loss: 0.6850 Acc: 0.5533
Val Loss: 0.6824 Acc: 0.5813
Best model updated and saved.

Epoch 15/80
----------
Train Loss: 0.6682 Acc: 0.5899
Val Loss: 0.6681 Acc: 0.5811
No improvement for 1 epochs.

Epoch 16/80
----------
Train Loss: 0.6490 Acc: 0.6198
Val Loss: 0.6868 Acc: 0.5994
Best model updated and saved.

Epoch 17/80
----------
Train Loss: 0.6354 Acc: 0.6359
Val Loss: 0.6111 Acc: 0.6666
Best model updated and saved.

Epoch 18/80
----------
Train Loss: 0.6251 Acc: 0.6441
Val Loss: 0.6487 Acc: 0.6422
No improvement for 1 epochs.

Epoch 19/80
----------
Train Loss: 0.6200 Acc: 0.6457
Val Loss: 0.6339 Acc: 0.6554
No improvement for 2 epochs.

Epoch 20/80
----------
Train Loss: 0.6115 Acc: 0.6639
Val Loss: 0.6101 Acc: 0.6631
No improvement for 3 epochs.

Epoch 21/80
----------
Train Loss: 0.6088 Acc: 0.6656
Val Loss: 0.6081 Acc: 0.6682
Best model updated and saved.

Epoch 22/80
----------
Train Loss: 0.6062 Acc: 0.6659
Val Loss: 0.7291 Acc: 0.6113
No improvement for 1 epochs.

Epoch 23/80
----------
Train Loss: 0.6067 Acc: 0.6636
Val Loss: 0.6371 Acc: 0.6592
No improvement for 2 epochs.

Epoch 24/80
----------
Train Loss: 0.6032 Acc: 0.6708
Val Loss: 0.6324 Acc: 0.6473
No improvement for 3 epochs.

Epoch 25/80
----------
Train Loss: 0.5998 Acc: 0.6663
Val Loss: 0.6800 Acc: 0.6159
No improvement for 4 epochs.

Epoch 26/80
----------
Train Loss: 0.6002 Acc: 0.6729
Val Loss: 0.6508 Acc: 0.6434
No improvement for 5 epochs.

Epoch 27/80
----------
Train Loss: 0.5942 Acc: 0.6794
Val Loss: 0.6035 Acc: 0.6847
Best model updated and saved.

Epoch 28/80
----------
Train Loss: 0.5907 Acc: 0.6831
Val Loss: 0.6444 Acc: 0.6438
No improvement for 1 epochs.

Epoch 29/80
----------
Train Loss: 0.5934 Acc: 0.6769
Val Loss: 0.5824 Acc: 0.6877
Best model updated and saved.

Epoch 30/80
----------
Train Loss: 0.5902 Acc: 0.6827
Val Loss: 0.5876 Acc: 0.6859
No improvement for 1 epochs.

Epoch 31/80
----------
Train Loss: 0.5866 Acc: 0.6839
Val Loss: 0.5933 Acc: 0.6903
Best model updated and saved.

Epoch 32/80
----------
Train Loss: 0.5834 Acc: 0.6873
Val Loss: 0.6156 Acc: 0.6805
No improvement for 1 epochs.

Epoch 33/80
----------
Train Loss: 0.5813 Acc: 0.6880
Val Loss: 0.6531 Acc: 0.6380
No improvement for 2 epochs.

Epoch 34/80
----------
Train Loss: 0.5829 Acc: 0.6888
Val Loss: 0.5781 Acc: 0.6961
Best model updated and saved.

Epoch 35/80
----------
Train Loss: 0.5816 Acc: 0.6878
Val Loss: 0.6155 Acc: 0.6715
No improvement for 1 epochs.

Epoch 36/80
----------
Train Loss: 0.5816 Acc: 0.6898
Val Loss: 0.5710 Acc: 0.7021
Best model updated and saved.

Epoch 37/80
----------
Train Loss: 0.5777 Acc: 0.6906
Val Loss: 0.6242 Acc: 0.6636
No improvement for 1 epochs.

Epoch 38/80
----------
Train Loss: 0.5758 Acc: 0.6970
Val Loss: 0.5767 Acc: 0.6973
No improvement for 2 epochs.

Epoch 39/80
----------
Train Loss: 0.5805 Acc: 0.6916
Val Loss: 0.6646 Acc: 0.6608
No improvement for 3 epochs.

Epoch 40/80
----------
Train Loss: 0.5770 Acc: 0.6894
Val Loss: 0.8413 Acc: 0.5767
No improvement for 4 epochs.

Epoch 41/80
----------
Train Loss: 0.5729 Acc: 0.7019
Val Loss: 0.6498 Acc: 0.6317
No improvement for 5 epochs.

Epoch 42/80
----------
Train Loss: 0.5778 Acc: 0.6927
Val Loss: 0.5936 Acc: 0.6875
No improvement for 6 epochs.

Epoch 43/80
----------
Train Loss: 0.5701 Acc: 0.6984
Val Loss: 0.6731 Acc: 0.6601
No improvement for 7 epochs.

Epoch 44/80
----------
Train Loss: 0.5706 Acc: 0.6959
Val Loss: 0.5776 Acc: 0.6919
No improvement for 8 epochs.

Epoch 45/80
----------
Train Loss: 0.5725 Acc: 0.6993
Val Loss: 0.6446 Acc: 0.6513
No improvement for 9 epochs.

Epoch 46/80
----------
Train Loss: 0.5669 Acc: 0.7035
Val Loss: 0.5629 Acc: 0.7126
Best model updated and saved.

Epoch 47/80
----------
Train Loss: 0.5698 Acc: 0.6989
Val Loss: 0.5931 Acc: 0.6968
No improvement for 1 epochs.

Epoch 48/80
----------
Train Loss: 0.5709 Acc: 0.6962
Val Loss: 0.5922 Acc: 0.6887
No improvement for 2 epochs.

Epoch 49/80
----------
Train Loss: 0.5679 Acc: 0.7012
Val Loss: 0.5836 Acc: 0.6975
No improvement for 3 epochs.

Epoch 50/80
----------
Train Loss: 0.5659 Acc: 0.7037
Val Loss: 0.6173 Acc: 0.6671
No improvement for 4 epochs.

Epoch 51/80
----------
Train Loss: 0.5674 Acc: 0.7010
Val Loss: 0.6627 Acc: 0.6424
No improvement for 5 epochs.

Epoch 52/80
----------
Train Loss: 0.5665 Acc: 0.7028
Val Loss: 0.7041 Acc: 0.6222
No improvement for 6 epochs.

Epoch 53/80
----------
Train Loss: 0.5630 Acc: 0.7061
Val Loss: 0.6214 Acc: 0.6671
No improvement for 7 epochs.

Epoch 54/80
----------
Train Loss: 0.5638 Acc: 0.7049
Val Loss: 0.6761 Acc: 0.6041
No improvement for 8 epochs.

Epoch 55/80
----------
Train Loss: 0.5601 Acc: 0.7085
Val Loss: 0.5905 Acc: 0.6919
No improvement for 9 epochs.

Epoch 56/80
----------
Train Loss: 0.5625 Acc: 0.7035
Val Loss: 0.5935 Acc: 0.6849
No improvement for 10 epochs.

Epoch 57/80
----------
Train Loss: 0.5594 Acc: 0.7092
Val Loss: 0.6674 Acc: 0.6517
No improvement for 11 epochs.

Epoch 58/80
----------
Train Loss: 0.5566 Acc: 0.7072
Val Loss: 0.7193 Acc: 0.6283
No improvement for 12 epochs.

Epoch 59/80
----------
Train Loss: 0.5572 Acc: 0.7123
Val Loss: 0.6088 Acc: 0.6959
No improvement for 13 epochs.

Epoch 60/80
----------
Train Loss: 0.5557 Acc: 0.7085
Val Loss: 0.5698 Acc: 0.6945
No improvement for 14 epochs.

Epoch 61/80
----------
Train Loss: 0.5553 Acc: 0.7130
Val Loss: 0.6157 Acc: 0.6824
No improvement for 15 epochs.

Epoch 62/80
----------
Train Loss: 0.5521 Acc: 0.7135
Val Loss: 0.6849 Acc: 0.6292
No improvement for 16 epochs.

Epoch 63/80
----------
Train Loss: 0.5546 Acc: 0.7102
Val Loss: 0.6369 Acc: 0.6856
No improvement for 17 epochs.

Epoch 64/80
----------
Train Loss: 0.5534 Acc: 0.7127
Val Loss: 0.6166 Acc: 0.6738
No improvement for 18 epochs.

Epoch 65/80
----------
Train Loss: 0.5517 Acc: 0.7179
Val Loss: 0.5824 Acc: 0.6970
No improvement for 19 epochs.

Epoch 66/80
----------
Train Loss: 0.5489 Acc: 0.7176
Val Loss: 0.6832 Acc: 0.6566
No improvement for 20 epochs.

Epoch 67/80
----------
Train Loss: 0.5460 Acc: 0.7181
Val Loss: 0.6278 Acc: 0.6698
No improvement for 21 epochs.

Epoch 68/80
----------
Train Loss: 0.5497 Acc: 0.7150
Val Loss: 0.5598 Acc: 0.7063
No improvement for 22 epochs.

Epoch 69/80
----------
Train Loss: 0.5478 Acc: 0.7145
Val Loss: 0.5965 Acc: 0.6852
No improvement for 23 epochs.

Epoch 70/80
----------
Train Loss: 0.5461 Acc: 0.7180
Val Loss: 0.5988 Acc: 0.6926
No improvement for 24 epochs.

Epoch 71/80
----------
Train Loss: 0.5438 Acc: 0.7197
Val Loss: 0.5926 Acc: 0.6945
No improvement for 25 epochs.

Epoch 72/80
----------
Train Loss: 0.5482 Acc: 0.7155
Val Loss: 0.5786 Acc: 0.6882
No improvement for 26 epochs.

Epoch 73/80
----------
Train Loss: 0.5475 Acc: 0.7174
Val Loss: 0.5481 Acc: 0.7205
Best model updated and saved.

Epoch 74/80
----------
Train Loss: 0.5444 Acc: 0.7192
Val Loss: 0.6899 Acc: 0.6343
No improvement for 1 epochs.

Epoch 75/80
----------
Train Loss: 0.5418 Acc: 0.7219
Val Loss: 0.6597 Acc: 0.6673
No improvement for 2 epochs.

Epoch 76/80
----------
Train Loss: 0.5431 Acc: 0.7218
Val Loss: 0.6045 Acc: 0.6819
No improvement for 3 epochs.

Epoch 77/80
----------
Train Loss: 0.5441 Acc: 0.7190
Val Loss: 0.6109 Acc: 0.6856
No improvement for 4 epochs.

Epoch 78/80
----------
Train Loss: 0.5420 Acc: 0.7190
Val Loss: 0.6305 Acc: 0.6731
No improvement for 5 epochs.

Epoch 79/80
----------
Train Loss: 0.5416 Acc: 0.7193
Val Loss: 0.5846 Acc: 0.7017
No improvement for 6 epochs.

Epoch 80/80
----------
Train Loss: 0.5392 Acc: 0.7241
Val Loss: 0.7557 Acc: 0.6310
No improvement for 7 epochs.

Training complete. Best val Acc: 0.7205
Final model saved at saved_models/final_vit_model.pth
Training and validation metrics plotted and saved to saved_models.
Test Accuracy: 67.22%
Classification Report:
               precision    recall  f1-score   support

          AD       0.67      0.68      0.67      4460
          NC       0.68      0.66      0.67      4540

    accuracy                           0.67      9000
   macro avg       0.67      0.67      0.67      9000
weighted avg       0.67      0.67      0.67      9000

Confusion Matrix:
 [[3040 1420]
 [1530 3010]]
Evaluation on test set completed. Confusion matrix saved to saved_models.
Total time taken: 215m 18s
Matplotlib created a temporary cache directory at /scratch/212225/matplotlib-l596bb4q because the default path (/cache/matplotlib) is not a writable directory; it is highly recommended to set the MPLCONFIGDIR environment variable to a writable directory, in particular to speed up the import of Matplotlib and to better support multiprocessing.
/home/Student/s4697959/PR-Report/predict_2.py:35: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(model_path, map_location=device))
Model loaded successfully.
Prediction for the image '1003730_100.jpeg': NC
Probabilities: [0.4404209  0.55957913]
